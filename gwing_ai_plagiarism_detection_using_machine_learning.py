# -*- coding: utf-8 -*-
"""Gwing_Ai_Plagiarism Detection using Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kdvxP-Oo1ncrdtyJpjcKLfOCbiEBP7qC

Install & Import Required Libraries
"""

# Install NLTK resources
import nltk
nltk.download('popular')

# Importing core libraries
import pandas as pd
import numpy as np
import string
import pickle
from nltk.corpus import stopwords

# Sklearn tools
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

""" Load the Dataset"""

# Upload dataset first in Colab: Go to the left sidebar > Files > Upload
df = pd.read_csv("customer_data.csv")  # Rename if needed
df.head()

"""Check Class Distribution"""

df['label'].value_counts()

"""### ðŸ§¼ Step 3: Preprocessing Text

We clean both `source_text` and `plagiarized_text` by:
- Removing punctuation
- Lowercasing
- Removing stop words

"""

def preprocess_text(text):
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = text.lower()
    stop_words = set(stopwords.words("english"))
    return " ".join(word for word in text.split() if word not in stop_words)

df["source_text"] = df["source_text"].apply(preprocess_text)
df["plagiarized_text"] = df["plagiarized_text"].apply(preprocess_text)

"""### ðŸ”  Step 4: TF-IDF Vectorization

We combine the two text columns into one and apply TF-IDF vectorization to convert text into numerical form.

"""

tfidf_vectorizer = TfidfVectorizer()
X = tfidf_vectorizer.fit_transform(df["source_text"] + " " + df["plagiarized_text"])
y = df["label"]

"""### ðŸ§ª Step 5: Split Dataset

Split the dataset into training and testing sets (80% / 20%).

"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""### ðŸ¤– Step 6A: Logistic Regression

"""

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""###  Step 6B: Random Forest Classifier

"""

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""###  Step 6C: Naive Bayes

"""

model = MultinomialNB()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""### Step 6D: SVM (Best Performer)

"""

model = SVC(kernel='linear', random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""###  Step 7: Save SVM Model & Vectorizer

"""

pickle.dump(model, open("model.pkl", "wb"))
pickle.dump(tfidf_vectorizer, open("tfidf_vectorizer.pkl", "wb"))

"""###  Step 8: Detect Plagiarism from New Text

"""

def detect(input_text):
    vectorized_text = tfidf_vectorizer.transform([input_text])
    result = model.predict(vectorized_text)
    return "Plagiarism Detected" if result[0] == 1 else "No Plagiarism"

"""### âœ… Step 9: Example Predictions

Below are a few examples where the system detects plagiarism and also confirms when there's no plagiarism. Try your own sentences too!

"""

# Plagiarized Example (intentionally similar to training data)
text_plagiarized = "Scientists have found a previously unknown butterfly in the Amazon jungle."
print("Input:", text_plagiarized)
print("Prediction:", detect(text_plagiarized))  # Likely to be detected

# Non-Plagiarized Example
text_clean = "Yoga improves mental health and boosts concentration over time."
print("\nInput:", text_clean)
print("Prediction:", detect(text_clean))  # Likely to be clean

# Edge Case - General Knowledge
text_general = "The sun rises in the east and sets in the west."
print("\nInput:", text_general)
print("Prediction:", detect(text_general))